Recently came across this[1] paper(published about a year ago though)
which describes the various patterns that are coming up with respect
to designing distributed applications.

This paper talks about the design patterns when developing micro
services based application that will be running on k8s/OpenShift like
clusters. The kind of workload we are running on OpenShift.

One notable thing WRT Bayesian we are running are queues in this paper
it mentions how queues can be easily deployed on kubernetes using
"Work queue pattern". Where a queue can be broken down into stages of
work, each stage being a container and things like that. Even with SQS
we can build this pattern, because we will still need to implement
those workers ourselves.

Not just queue but other patterns that were developed, while running
different kind of workloads inside Google.


Abstract of the paper(Copied from [2]):

In the late 1980s and early 1990s, object-oriented programming
revolutionized software development, popularizing the approach of
building of applications as collections of modular components. Today
we are seeing a similar revolution in distributed system development,
with the increasing popularity of microservice architectures built
from containerized software components. Containers [15] [22] [1] [2]
are particularly well-suited as the fundamental “object” in
distributed systems by virtue of the walls they erect at the container
boundary. As this architectural style matures, we are seeing the
emergence of design patterns, much as we did for objectoriented
programs, and for the same reason – thinking in terms of objects (or
containers) abstracts away the lowlevel details of code, eventually
revealing higher-level patterns that are common to a variety of
applications and algorithms.

This paper describes three types of design patterns that we have
observed emerging in container-based distributed systems:
single-container patterns for container management, single-node
patterns of closely cooperating containers, and multi-node patterns
for distributed algorithms. Like object-oriented patterns before them,
these patterns for distributed computation encode best practices,
simplify development, and make the systems where they are used more
reliable.



[1] Brendan Burns, David Oppenheimer: Design patterns for
container-based distributed systems
https://www.usenix.org/system/files/conference/hotcloud16/hotcloud16_burns.pdf
[2] https://www.usenix.org/node/196347
[3] Blog post about the same
http://blog.kubernetes.io/2016/06/container-design-patterns.html
